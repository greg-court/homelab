COMPUTED VALUES:
apiVersionOverrides: {}
applicationSet:
  affinity: {}
  allowAnyNamespace: false
  automountServiceAccountToken: true
  certificate:
    additionalHosts: []
    annotations: {}
    domain: ""
    duration: ""
    enabled: false
    issuer:
      group: ""
      kind: ""
      name: ""
    privateKey:
      algorithm: RSA
      encoding: PKCS1
      rotationPolicy: Never
      size: 2048
    renewBefore: ""
  containerPorts:
    metrics: 8080
    probe: 8081
    webhook: 7000
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  deploymentAnnotations: {}
  deploymentLabels: {}
  deploymentStrategy: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  emptyDir:
    sizeLimit: ""
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  imagePullSecrets: []
  ingress:
    annotations: {}
    enabled: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: ""
    ingressClassName: ""
    labels: {}
    path: /api/webhook
    pathType: Prefix
    tls: false
  initContainers: []
  livenessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    enabled: false
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      portName: http-metrics
      servicePort: 8080
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      scrapeTimeout: ""
      selector: {}
      tlsConfig: {}
  name: applicationset-controller
  networkPolicy:
    create: false
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources: {}
  runtimeClassName: ""
  service:
    annotations: {}
    labels: {}
    port: 7000
    portName: http-webhook
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    labels: {}
    name: argocd-applicationset-controller
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
commitServer:
  affinity: {}
  automountServiceAccountToken: false
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  deploymentAnnotations: {}
  deploymentLabels: {}
  deploymentStrategy: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  enabled: false
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 5
  metrics:
    enabled: false
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      portName: metrics
      servicePort: 8087
      type: ClusterIP
  name: commit-server
  networkPolicy:
    create: false
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
  resources: {}
  runtimeClassName: ""
  service:
    annotations: {}
    labels: {}
    port: 8086
    portName: server
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    labels: {}
    name: argocd-commit-server
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
configs:
  clusterCredentials: {}
  clusters:
    inCluster:
      enabled: true
  cm:
    admin.enabled: true
    annotations: {}
    application.instanceLabelKey: argocd.argoproj.io/instance
    application.sync.impersonation.enabled: false
    create: true
    exec.enabled: false
    resource.customizations.ignoreResourceUpdates.ConfigMap: |
      jqPathExpressions:
        # Ignore the cluster-autoscaler status
        - '.metadata.annotations."cluster-autoscaler.kubernetes.io/last-updated"'
        # Ignore the annotation of the legacy Leases election
        - '.metadata.annotations."control-plane.alpha.kubernetes.io/leader"'
    resource.customizations.ignoreResourceUpdates.Endpoints: |
      jsonPointers:
        - /metadata
        - /subsets
    resource.customizations.ignoreResourceUpdates.all: |
      jsonPointers:
        - /status
    resource.customizations.ignoreResourceUpdates.apps_ReplicaSet: |
      jqPathExpressions:
        - '.metadata.annotations."deployment.kubernetes.io/desired-replicas"'
        - '.metadata.annotations."deployment.kubernetes.io/max-replicas"'
        - '.metadata.annotations."rollout.argoproj.io/desired-replicas"'
    resource.customizations.ignoreResourceUpdates.argoproj.io_Application: |
      jqPathExpressions:
        - '.metadata.annotations."notified.notifications.argoproj.io"'
        - '.metadata.annotations."argocd.argoproj.io/refresh"'
        - '.metadata.annotations."argocd.argoproj.io/hydrate"'
        - '.operation'
    resource.customizations.ignoreResourceUpdates.argoproj.io_Rollout: |
      jqPathExpressions:
        - '.metadata.annotations."notified.notifications.argoproj.io"'
    resource.customizations.ignoreResourceUpdates.autoscaling_HorizontalPodAutoscaler: |
      jqPathExpressions:
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/behavior"'
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/conditions"'
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/metrics"'
        - '.metadata.annotations."autoscaling.alpha.kubernetes.io/current-metrics"'
    resource.customizations.ignoreResourceUpdates.discovery.k8s.io_EndpointSlice: |
      jsonPointers:
        - /metadata
        - /endpoints
        - /ports
    resource.exclusions: |
      ### Network resources created by the Kubernetes control plane and excluded to reduce the number of watched events and UI clutter
      - apiGroups:
        - ''
        - discovery.k8s.io
        kinds:
        - Endpoints
        - EndpointSlice
      ### Internal Kubernetes resources excluded reduce the number of watched events
      - apiGroups:
        - coordination.k8s.io
        kinds:
        - Lease
      ### Internal Kubernetes Authz/Authn resources excluded reduce the number of watched events
      - apiGroups:
        - authentication.k8s.io
        - authorization.k8s.io
        kinds:
        - SelfSubjectReview
        - TokenReview
        - LocalSubjectAccessReview
        - SelfSubjectAccessReview
        - SelfSubjectRulesReview
        - SubjectAccessReview
      ### Intermediate Certificate Request excluded reduce the number of watched events
      - apiGroups:
        - certificates.k8s.io
        kinds:
        - CertificateSigningRequest
      - apiGroups:
        - cert-manager.io
        kinds:
        - CertificateRequest
      ### Cilium internal resources excluded reduce the number of watched events and UI Clutter
      - apiGroups:
        - cilium.io
        kinds:
        - CiliumIdentity
        - CiliumEndpoint
        - CiliumEndpointSlice
      ### Kyverno intermediate and reporting resources excluded reduce the number of watched events and improve performance
      - apiGroups:
        - kyverno.io
        - reports.kyverno.io
        - wgpolicyk8s.io
        kinds:
        - PolicyReport
        - ClusterPolicyReport
        - EphemeralReport
        - ClusterEphemeralReport
        - AdmissionReport
        - ClusterAdmissionReport
        - BackgroundScanReport
        - ClusterBackgroundScanReport
        - UpdateRequest
    server.rbac.log.enforce.enable: false
    statusbadge.enabled: false
    timeout.hard.reconciliation: 0s
    timeout.reconciliation: 180s
  cmp:
    annotations: {}
    create: false
    plugins: {}
  credentialTemplates: {}
  credentialTemplatesAnnotations: {}
  gpg:
    annotations: {}
    keys: {}
  params:
    annotations: {}
    application.namespaces: ""
    applicationsetcontroller.enable.progressive.syncs: false
    applicationsetcontroller.namespaces: ""
    applicationsetcontroller.policy: sync
    controller.ignore.normalizer.jq.timeout: 1s
    controller.operation.processors: 10
    controller.repo.server.timeout.seconds: 60
    controller.self.heal.timeout.seconds: 5
    controller.status.processors: 20
    controller.sync.timeout.seconds: 0
    create: true
    hydrator.enabled: false
    otlp.address: ""
    reposerver.parallelism.limit: 0
    server.basehref: /
    server.disable.auth: false
    server.enable.gzip: true
    server.enable.proxy.extension: false
    server.insecure: false
    server.rootpath: ""
    server.staticassets: /shared/app
    server.x.frame.options: sameorigin
  rbac:
    annotations: {}
    create: true
    policy.csv: ""
    policy.default: ""
    policy.matchMode: glob
    scopes: '[groups]'
  repositories: {}
  repositoriesAnnotations: {}
  secret:
    annotations: {}
    argocdServerAdminPassword: ""
    argocdServerAdminPasswordMtime: ""
    azureDevops:
      password: ""
      username: ""
    bitbucketServerSecret: ""
    bitbucketUUID: ""
    createSecret: true
    extra: {}
    githubSecret: ""
    gitlabSecret: ""
    gogsSecret: ""
    labels: {}
  ssh:
    annotations: {}
    create: true
    extraHosts: ""
    knownHosts: |
      [ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
      [ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
      [ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
      bitbucket.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPIQmuzMBuKdWeF4+a2sjSSpBK0iqitSQ+5BM9KhpexuGt20JpTVM7u5BDZngncgrqDMbWdxMWWOGtZ9UgbqgZE=
      bitbucket.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu+UUO
      bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDQeJzhupRu0u0cdegZIa8e86EG2qOCsIsD1Xw0xSeiPDlCr7kq97NLmMbpKTX6Esc30NuoqEEHCuc7yWtwp8dI76EEEB1VqY9QJq6vk+aySyboD5QF61I/1WeTwu+deCbgKMGbUijeXhtfbxSxm6JwGrXrhBdofTsbKRUsrN1WoNgUa8uqN1Vx6WAJw1JHPhglEGGHea6QICwJOAr/6mrui/oB7pkaWKHj3z7d1IC4KWLtY47elvjbaTlkN04Kc/5LFEirorGYVbt15kAUlqGM65pk6ZBxtaO3+30LVlORZkxOh+LKL/BvbZ/iRNhItLqNyieoQj/uh/7Iv4uyH/cV/0b4WDSd3DptigWq84lJubb9t/DnZlrJazxyDCulTmKdOR7vs9gMTo+uoIrPSb8ScTtvw65+odKAlBj59dhnVp9zd7QUojOpXlL62Aw56U4oO+FALuevvMjiWeavKhJqlR7i5n9srYcrNV7ttmDw7kf/97P5zauIhxcjX+xHv4M=
      github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
      github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
      github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
      gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
      gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
      gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
      ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
      vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
  styles: ""
  tls:
    annotations: {}
    certificates: {}
    create: true
controller:
  affinity: {}
  automountServiceAccountToken: true
  clusterRoleRules:
    enabled: false
    rules: []
  containerPorts:
    metrics: 8082
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  deploymentAnnotations: {}
  deploymentLabels: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  dynamicClusterDistribution: false
  emptyDir:
    sizeLimit: ""
  env: []
  envFrom: []
  extraArgs: []
  extraContainers: []
  heartbeatTime: 10
  hostNetwork: false
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  imagePullSecrets: []
  initContainers: []
  metrics:
    applicationLabels:
      enabled: false
      labels: []
    enabled: false
    rules:
      additionalLabels: {}
      annotations: {}
      enabled: false
      namespace: ""
      selector: {}
      spec: []
    scrapeTimeout: ""
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      portName: http-metrics
      servicePort: 8082
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      selector: {}
      tlsConfig: {}
  name: application-controller
  networkPolicy:
    create: false
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources: {}
  revisionHistoryLimit: 5
  runtimeClassName: ""
  serverSideApply:
    enabled: true
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    labels: {}
    name: argocd-application-controller
  statefulsetAnnotations: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []
crds:
  additionalLabels: {}
  annotations: {}
  install: true
  keep: true
createAggregateRoles: false
createClusterRoles: true
dex:
  affinity: {}
  automountServiceAccountToken: true
  certificateSecret:
    annotations: {}
    ca: ""
    crt: ""
    enabled: false
    key: ""
    labels: {}
  containerPorts:
    grpc: 5557
    http: 5556
    metrics: 5558
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  deploymentAnnotations: {}
  deploymentLabels: {}
  deploymentStrategy: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  emptyDir:
    sizeLimit: ""
  enabled: true
  env: []
  envFrom: []
  extraArgs: []
  extraContainers: []
  image:
    imagePullPolicy: ""
    repository: ghcr.io/dexidp/dex
    tag: v2.43.1
  imagePullSecrets: []
  initContainers: []
  initImage:
    imagePullPolicy: ""
    repository: ""
    resources: {}
    tag: ""
  livenessProbe:
    enabled: false
    failureThreshold: 3
    httpPath: /healthz/live
    httpPort: metrics
    httpScheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    enabled: false
    service:
      annotations: {}
      labels: {}
      portName: http-metrics
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      selector: {}
      tlsConfig: {}
  name: dex-server
  networkPolicy:
    create: false
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe:
    enabled: false
    failureThreshold: 3
    httpPath: /healthz/ready
    httpPort: metrics
    httpScheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  resources: {}
  runtimeClassName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: argocd-dex-server
  servicePortGrpc: 5557
  servicePortGrpcName: grpc
  servicePortHttp: 5556
  servicePortHttpName: http
  servicePortMetrics: 5558
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []
externalRedis:
  existingSecret: ""
  host: ""
  password: ""
  port: 6379
  secretAnnotations: {}
  username: ""
extraObjects: []
fullnameOverride: ""
global:
  addPrometheusAnnotations: false
  additionalLabels: {}
  affinity:
    nodeAffinity:
      matchExpressions: []
      type: hard
    podAntiAffinity: soft
  certificateAnnotations: {}
  deploymentAnnotations: {}
  deploymentLabels: {}
  deploymentStrategy: {}
  domain: argocd.example.com
  dualStack:
    ipFamilies: []
    ipFamilyPolicy: ""
  env: []
  hostAliases: []
  image:
    imagePullPolicy: IfNotPresent
    repository: quay.io/argoproj/argocd
    tag: ""
  imagePullSecrets: []
  logging:
    format: text
    level: info
  networkPolicy:
    create: false
    defaultDenyIngress: false
  nodeSelector:
    kubernetes.io/os: linux
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  revisionHistoryLimit: 3
  runtimeClassName: ""
  securityContext: {}
  statefulsetAnnotations: {}
  tolerations: []
  topologySpreadConstraints: []
kubeVersionOverride: ""
nameOverride: argocd
namespaceOverride: ""
notifications:
  affinity: {}
  argocdUrl: ""
  automountServiceAccountToken: true
  clusterRoleRules:
    rules: []
  cm:
    create: true
  containerPorts:
    metrics: 9001
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  context: {}
  deploymentAnnotations: {}
  deploymentLabels: {}
  deploymentStrategy:
    type: Recreate
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  enabled: true
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  imagePullSecrets: []
  initContainers: []
  livenessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    enabled: false
    port: 9001
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      portName: http-metrics
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      honorLabels: false
      metricRelabelings: []
      relabelings: []
      scheme: ""
      selector: {}
      tlsConfig: {}
  name: notifications-controller
  networkPolicy:
    create: false
  nodeSelector: {}
  notifiers: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  resources: {}
  runtimeClassName: ""
  secret:
    annotations: {}
    create: true
    items: {}
    labels: {}
    name: argocd-notifications-secret
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    labels: {}
    name: argocd-notifications-controller
  subscriptions: []
  templates: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
  triggers: {}
openshift:
  enabled: false
redis:
  affinity: {}
  automountServiceAccountToken: true
  containerPorts:
    metrics: 9121
    redis: 6379
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  deploymentAnnotations: {}
  deploymentLabels: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  enabled: true
  env: []
  envFrom: []
  exporter:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    enabled: false
    env: []
    image:
      imagePullPolicy: ""
      repository: ghcr.io/oliver006/redis_exporter
      tag: v1.74.0
    livenessProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 15
    readinessProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 15
    resources: {}
  extraArgs: []
  extraContainers: []
  image:
    imagePullPolicy: ""
    repository: ecr-public.aws.com/docker/library/redis
    tag: 7.2.8-alpine
  imagePullSecrets: []
  initContainers: []
  livenessProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 15
  metrics:
    enabled: false
    service:
      annotations: {}
      clusterIP: None
      labels: {}
      portName: http-metrics
      servicePort: 9121
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      selector: {}
      tlsConfig: {}
  name: redis
  networkPolicy:
    create: false
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  readinessProbe:
    enabled: false
    failureThreshold: 5
    initialDelaySeconds: 30
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 15
  resources: {}
  runtimeClassName: ""
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
    seccompProfile:
      type: RuntimeDefault
  service:
    annotations: {}
    labels: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: false
    name: ""
  servicePort: 6379
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []
redis-ha:
  additionalAffinities: {}
  affinity: ""
  auth: true
  containerSecurityContext:
    readOnlyRootFilesystem: true
  enabled: false
  existingSecret: argocd-redis
  exporter:
    enabled: false
    image: ghcr.io/oliver006/redis_exporter
    tag: v1.69.0
  haproxy:
    additionalAffinities: {}
    affinity: ""
    containerSecurityContext:
      readOnlyRootFilesystem: true
    enabled: true
    hardAntiAffinity: true
    image:
      repository: ecr-public.aws.com/docker/library/haproxy
    labels:
      app.kubernetes.io/name: argocd-redis-ha-haproxy
    metrics:
      enabled: true
    tolerations: []
  hardAntiAffinity: true
  image:
    repository: ecr-public.aws.com/docker/library/redis
    tag: 7.2.8-alpine
  persistentVolume:
    enabled: false
  redis:
    config:
      save: '""'
    masterGroupName: argocd
  tolerations: []
  topologySpreadConstraints:
    enabled: false
    maxSkew: ""
    topologyKey: ""
    whenUnsatisfiable: ""
redisSecretInit:
  affinity: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  enabled: true
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  imagePullSecrets: []
  jobAnnotations: {}
  name: redis-secret-init
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  resources: {}
  securityContext: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  tolerations: []
repoServer:
  affinity: {}
  automountServiceAccountToken: true
  autoscaling:
    behavior: {}
    enabled: false
    maxReplicas: 5
    metrics: []
    minReplicas: 1
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  certificateSecret:
    annotations: {}
    ca: ""
    crt: ""
    enabled: false
    key: ""
    labels: {}
  clusterRoleRules:
    enabled: false
    rules: []
  containerPorts:
    metrics: 8084
    server: 8081
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  deploymentAnnotations: {}
  deploymentLabels: {}
  deploymentStrategy: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  emptyDir:
    sizeLimit: ""
  env: []
  envFrom: []
  existingVolumes: {}
  extraArgs: []
  extraContainers: []
  hostNetwork: false
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  imagePullSecrets: []
  initContainers: []
  lifecycle: {}
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    enabled: false
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      portName: http-metrics
      servicePort: 8084
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      scrapeTimeout: ""
      selector: {}
      tlsConfig: {}
  name: repo-server
  networkPolicy:
    create: false
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  rbac: []
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources: {}
  runtimeClassName: ""
  service:
    annotations: {}
    labels: {}
    port: 8081
    portName: tcp-repo-server
    trafficDistribution: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    labels: {}
    name: ""
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
  useEphemeralHelmWorkingDir: true
  volumeMounts: []
  volumes: []
server:
  affinity: {}
  automountServiceAccountToken: true
  autoscaling:
    behavior: {}
    enabled: false
    maxReplicas: 5
    metrics: []
    minReplicas: 1
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  certificate:
    additionalHosts: []
    annotations: {}
    domain: ""
    duration: ""
    enabled: false
    issuer:
      group: ""
      kind: ""
      name: ""
    privateKey:
      algorithm: RSA
      encoding: PKCS1
      rotationPolicy: Never
      size: 2048
    renewBefore: ""
    secretTemplateAnnotations: {}
    usages: []
  certificateSecret:
    annotations: {}
    crt: ""
    enabled: false
    key: ""
    labels: {}
  clusterRoleRules:
    enabled: false
    rules: []
  containerPorts:
    metrics: 8083
    server: 8080
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  deploymentAnnotations: {}
  deploymentLabels: {}
  deploymentStrategy: {}
  dnsConfig: {}
  dnsPolicy: ClusterFirst
  emptyDir:
    sizeLimit: ""
  env: []
  envFrom: []
  extensions:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    enabled: false
    extensionList: []
    image:
      imagePullPolicy: ""
      repository: quay.io/argoprojlabs/argocd-extension-installer
      tag: v0.0.8
    resources: {}
  extraArgs: []
  extraContainers: []
  hostNetwork: false
  image:
    imagePullPolicy: ""
    repository: ""
    tag: ""
  imagePullSecrets: []
  ingress:
    annotations: {}
    aws:
      backendProtocolVersion: GRPC
      serviceType: NodePort
    controller: generic
    enabled: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    gke:
      backendConfig: {}
      frontendConfig: {}
      managedCertificate:
        create: true
        extraDomains: []
    hostname: ""
    ingressClassName: ""
    labels: {}
    path: /
    pathType: Prefix
    tls: false
  ingressGrpc:
    annotations: {}
    enabled: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: ""
    ingressClassName: ""
    labels: {}
    path: /
    pathType: Prefix
    tls: false
  initContainers: []
  lifecycle: {}
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  metrics:
    enabled: false
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      portName: http-metrics
      servicePort: 8083
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      annotations: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scheme: ""
      scrapeTimeout: ""
      selector: {}
      tlsConfig: {}
  name: server
  networkPolicy:
    create: false
  nodeSelector: {}
  pdb:
    annotations: {}
    enabled: false
    labels: {}
    maxUnavailable: ""
    minAvailable: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  rbac:
    clusterRole:
      create: true
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  replicas: 1
  resources: {}
  route:
    annotations: {}
    enabled: false
    hostname: ""
    termination_policy: None
    termination_type: passthrough
  runtimeClassName: ""
  service:
    annotations: {}
    externalIPs: []
    externalTrafficPolicy: Cluster
    labels: {}
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePortHttp: 30080
    nodePortHttps: 30443
    servicePortHttp: 80
    servicePortHttpName: http
    servicePortHttps: 443
    servicePortHttpsAppProtocol: ""
    servicePortHttpsName: https
    sessionAffinity: None
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    labels: {}
    name: argocd-server
  terminationGracePeriodSeconds: 30
  tolerations: []
  topologySpreadConstraints: []
  volumeMounts: []
  volumes: []

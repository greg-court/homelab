name: Docker Images | Build & Release

on:
  push:
    paths: ['docker-images/**']
    branches: [main]
  workflow_dispatch:
    inputs:
      image:
        description: 'Build this image manually'
        required: false
      release_type:
        description: 'major | minor | patch (ignored if custom version given below)'
        required: false
      custom_version:
        description: 'Custom version to use (overrides release_type)'
        required: false

permissions:
  id-token: write # needed for azure/login OIDC
  contents: write

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - name: Check out docker-images only
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: docker-images

      - id: set
        shell: bash
        run: |
          set -euo pipefail
          declare -a DIRS=()

          if [[ -n "${{ github.event.inputs.image }}" ]]; then
            if [[ -d "docker-images/${{ github.event.inputs.image }}" ]]; then
              DIRS+=("${{ github.event.inputs.image }}")
            else
              echo "Manual run for '${{ github.event.inputs.image }}' specified, but directory not found. Skipping."
            fi
          else
            DIFF_BASE="${{ github.event.before }}"
            DIFF_HEAD="${{ github.sha }}"
            CHANGED_FILES=$(git diff --name-only --diff-filter=AMR "$DIFF_BASE" "$DIFF_HEAD" | grep '^docker-images/' || true)
            while read -r file; do
              [[ -z "$file" ]] && continue
              DIR=$(echo "$file" | cut -d/ -f2)
              if [[ -n "$DIR" ]]; then
                DIRS+=("$DIR")
              fi
            done <<< "$CHANGED_FILES"
          fi

          UNIQUE_DIRS=$(printf '%s\n' "${DIRS[@]}" | sort -u)
          MATRIX="[]"
          if [[ -n "$UNIQUE_DIRS" ]]; then
            MATRIX=$(printf '%s\n' "${UNIQUE_DIRS[@]}" | jq -R . | jq -cs 'map({image: .})')
          fi

          echo "âœ… Final matrix for build job: $MATRIX"
          echo "matrix=$MATRIX" >>"$GITHUB_OUTPUT"

  build:
    needs: prep
    if: needs.prep.outputs.matrix != '[]'
    runs-on: [self-hosted, docker]

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.image || matrix.image }}
      cancel-in-progress: false

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prep.outputs.matrix) }}

    steps:
      - name: Checkout repo (full, includes local action)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Load Docker build secrets from Azure Key Vault
        uses: ./.github/actions/fetch-akv-secrets
        with:
          keyvault: kv-homelab-uks
          secrets: docker-user,docker-pat,repo-tagging-pat,discord-webhook-url
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Buildx on Kubernetes (rootless)
        uses: docker/setup-buildx-action@v3
        with:
          driver: kubernetes
          driver-opts: |
            namespace=agents-and-runners
            image=moby/buildkit:latest
            rootless=true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PAT }}

      - name: Determine version
        id: semver
        if: ${{ github.event.inputs.custom_version == '' }}
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          tag_prefix: 'docker-images/${{ matrix.image }}/v'
          change_path: 'docker-images/${{ matrix.image }}'
          namespace: '${{ matrix.image }}'

      - name: Build and Push Docker Image
        id: push
        env:
          DOCKER_NAMESPACE: gr10
        shell: bash
        run: |
          set -euo pipefail
          docker buildx build --platform linux/amd64 \
            -t "${DOCKER_NAMESPACE}/${{ matrix.image }}:${{ steps.semver.outputs.version }}" \
            -t "${DOCKER_NAMESPACE}/${{ matrix.image }}:latest" \
            --push \
            "docker-images/${{ matrix.image }}"
          echo "published=${DOCKER_NAMESPACE}/${{ matrix.image }}:${{ steps.semver.outputs.version }}" >>"$GITHUB_OUTPUT"

      - name: Summary
        run: echo "âœ… Published ${{ steps.push.outputs.published }}"

      - name: Create Git Tag via API
        env:
          GH_TOKEN: ${{ env.REPO_TAGGING_PAT }} # from AKV
          VERSION: ${{ github.event.inputs.custom_version || steps.semver.outputs.version_tag }}
          SHA: ${{ github.sha }}
        run: |
          echo "Creating tag: $VERSION"
          gh api repos/${{ github.repository }}/git/refs \
            -f ref="refs/tags/$VERSION" \
            -f sha="$SHA"

      - name: Notify Discord
        if: success()
        env:
          DISCORD_WEBHOOK_URL: ${{ env.DISCORD_WEBHOOK_URL }} # from AKV
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                "username": "CI Bot",
                "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "content": "**ðŸš€ Docker Build Complete**\n**Image:** `"${{ matrix.image }}"`\n**Version:** `"${{ steps.semver.outputs.version }}"`\n**Git tag:** `"${{ steps.semver.outputs.version_tag }}"`\nâœ… Success!"
              }' \
              "$DISCORD_WEBHOOK_URL"
